// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ReadRootGetData, ReadRootGetResponse, CreateReportReportsPostData, CreateReportReportsPostResponse, ReadReportsReportsGetData, ReadReportsReportsGetResponse, ReadReportReportsUsernameGetData, ReadReportReportsUsernameGetResponse, UpdateReportReportsUsernamePutData, UpdateReportReportsUsernamePutResponse, DeleteReportReportsUsernameDeleteData, DeleteReportReportsUsernameDeleteResponse } from './types.gen';

/**
 * Read Root
 * @param data The data for the request.
 * @param data.testing
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const readRootGet = (data: ReadRootGetData = {}): CancelablePromise<ReadRootGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/',
    query: {
        testing: data.testing
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Report
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.testing
 * @returns Report Successful Response
 * @throws ApiError
 */
export const createReportReportsPost = (data: CreateReportReportsPostData): CancelablePromise<CreateReportReportsPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/reports',
    query: {
        testing: data.testing
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Read Reports
 * @param data The data for the request.
 * @param data.testing
 * @returns Report Successful Response
 * @throws ApiError
 */
export const readReportsReportsGet = (data: ReadReportsReportsGetData = {}): CancelablePromise<ReadReportsReportsGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/reports',
    query: {
        testing: data.testing
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Read Report
 * @param data The data for the request.
 * @param data.username
 * @param data.testing
 * @returns Report Successful Response
 * @throws ApiError
 */
export const readReportReportsUsernameGet = (data: ReadReportReportsUsernameGetData): CancelablePromise<ReadReportReportsUsernameGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/reports/{username}',
    path: {
        username: data.username
    },
    query: {
        testing: data.testing
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Report
 * @param data The data for the request.
 * @param data.username
 * @param data.requestBody
 * @param data.testing
 * @returns Report Successful Response
 * @throws ApiError
 */
export const updateReportReportsUsernamePut = (data: UpdateReportReportsUsernamePutData): CancelablePromise<UpdateReportReportsUsernamePutResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/reports/{username}',
    path: {
        username: data.username
    },
    query: {
        testing: data.testing
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Report
 * @param data The data for the request.
 * @param data.username
 * @param data.testing
 * @returns Report Successful Response
 * @throws ApiError
 */
export const deleteReportReportsUsernameDelete = (data: DeleteReportReportsUsernameDeleteData): CancelablePromise<DeleteReportReportsUsernameDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/reports/{username}',
    path: {
        username: data.username
    },
    query: {
        testing: data.testing
    },
    errors: {
        422: 'Validation Error'
    }
}); };